# bot.py  ‚Äî Memory Forever v0.2 (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π)
# –ß—Ç–æ —É–º–µ–µ—Ç —Å–µ–π—á–∞—Å:
# - /start: –≤—ã–±–æ—Ä —Å—é–∂–µ—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
# - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –û–î–ù–û —Ñ–æ—Ç–æ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—Ç–∞—Ä—Ç–∞)
# - –≥–µ–Ω–µ—Ä–∏—Ç 5—Å/10—Å —á–µ—Ä–µ–∑ Runway (image_to_video, gen4_turbo)
# - –≤–µ—Ä—Ç–∏–∫–∞–ª—å 720x1280
# - –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#
# –ß—Ç–æ –¥–æ–±–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º:
# - 2 —Ñ–æ—Ç–æ (—Ä–∞–∑–¥–µ–ª—å–Ω–æ), –≤—ã—Ä–µ–∑–∞–Ω–∏–µ —Ñ–æ–Ω–∞, –ø—Ä–æ—Å—Ç–∞—è —Å–∫–ª–µ–π–∫–∞
# - –æ–≤–µ—Ä–ª–µ–π –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞/–ª–æ–≥–æ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏—Ç—Ä
# - –∞–≤—Ç–æ-QC (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π)
# - –≤—Ç–æ—Ä–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è (Luma/PixVerse) –ø–æ –∫–Ω–æ–ø–∫–µ

import os, io, time, base64, uuid, requests
from datetime import datetime
from PIL import Image
import telebot

# ==== –ö–õ–Æ–ß–ò ====
TG_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN") or "PUT_YOUR_TELEGRAM_TOKEN_HERE"
RUNWAY_KEY = os.environ.get("RUNWAY_API_KEY") or "PUT_YOUR_RUNWAY_KEY_HERE"
OPENAI_KEY = os.environ.get("OPENAI_API_KEY") or "PUT_YOUR_OPENAI_KEY_HERE"  # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º

if TG_TOKEN.startswith("PUT_YOUR") or RUNWAY_KEY.startswith("PUT_YOUR"):
    print("‚ö†Ô∏è –ó–∞–¥–∞–π TELEGRAM_BOT_TOKEN –∏ RUNWAY_API_KEY –≤ Tools ‚Üí Secrets –∏–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ.")

bot = telebot.TeleBot(TG_TOKEN, parse_mode="HTML")

# ==== –ü–∞–ø–∫–∏ ====
os.makedirs("uploads", exist_ok=True)
os.makedirs("renders", exist_ok=True)

# ==== –ö–Ω–æ–ø–∫–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ====
SCENES = {
    "ü§ù –û–±–Ω–∏–º–∞—à–∫–∏ 5—Å": {"duration": 5, "kind": "hug"},
    "ü§ù –û–±–Ω–∏–º–∞—à–∫–∏ 10—Å": {"duration": 10, "kind": "hug"},
    "üòò –©—ë—á–∫–∞ 10—Å": {"duration": 10, "kind": "kiss_cheek"},
    "üëã –ú–∞—à–µ—Ç —Ä—É–∫–æ–π 10—Å": {"duration": 10, "kind": "wave"},
    "ü™ú –£—Ö–æ–¥–∏—Ç –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ 10—Å": {"duration": 10, "kind": "stairs"},
}
FORMATS = ["üßç –í —Ä–æ—Å—Ç", "üßç‚Äç‚ôÇÔ∏è –ü–æ –ø–æ—è—Å", "ü´± –ü–æ –≥—Ä—É–¥—å"]

# –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–µ–π—Ç –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
user_state = {}  # user_id -> {"format": ..., "scene_key": ..., "photo_path": ...}

# ==== –ü—Ä–æ–º–ø—Ç-–±–∞–Ω–∫ (–º–∏–Ω–∏–º—É–º) ====
NEG_TAIL = (
    "no extra fingers, no deformed hands, no melting faces, identity preserved, "
    "consistent faces, no background warping, static camera, clean edges"
)

def build_prompt(kind: str, choose_format: str):
    # –£—Ç–æ—á–Ω—è–µ–º –∫—Ä—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–Ω–µ —Ä–µ–∂–µ–º –≤–∏–¥–µ–æ, –∞ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏)
    if "–í —Ä–æ—Å—Ç" in choose_format:
        framing = "full-body shot"
    elif "–ü–æ –ø–æ—è—Å" in choose_format:
        framing = "waist-up shot"
    else:
        framing = "chest-up shot"

    if kind == "hug":
        main = "two people start facing the camera, then gently turn toward each other and hug; subtle sway"
    elif kind == "kiss_cheek":
        main = "two people turn toward each other; the parent gives a small kiss on the child's cheek; hold the moment"
    elif kind == "wave":
        main = "one person stands and waves hand goodbye; gentle, heartfelt gesture; calm breathing"
    elif kind == "stairs":
        main = "one person looks back kindly, then slowly walks upstairs into the heavenly light; fade into light at the end"
    else:
        main = "two people gently approach each other and hug"

    # –í–∞–∂–Ω–æ: –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏—Ü–∞ –∏ —Ñ–æ–Ω –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
    return (
        f"{main}; {framing}; keep both faces identical to the reference; realistic skin; "
        f"soft light; camera stays still; {NEG_TAIL}"
    )

# ==== Runway API (image_to_video + –ø–æ–ª–ª–∏–Ω–≥ –∑–∞–¥–∞—á–∏) ====
RUNWAY_API = "https://api.dev.runwayml.com/v1"
HEADERS = {
    "Authorization": f"Bearer {RUNWAY_KEY}",
    "X-Runway-Version": "2024-11-06",
    "Content-Type": "application/json",
}

def encode_image_to_datauri(path: str) -> str:
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
    ext = path.lower().split(".")[-1]
    mime = "image/jpeg" if ext in ["jpg", "jpeg"] else "image/png"
    return f"data:{mime};base64,{b64}"

def runway_start(prompt_image_datauri: str, prompt_text: str, duration: int):
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å 720x1280 –¥–ª—è Reels/Stories
    payload = {
        "model": "gen4_turbo",
        "promptImage": prompt_image_datauri,
        "promptText": prompt_text,
        "ratio": "720:1280",
        "duration": duration,  # —Ç–æ–ª—å–∫–æ 5 –∏–ª–∏ 10
    }
    r = requests.post(f"{RUNWAY_API}/image_to_video", headers=HEADERS, json=payload, timeout=60)
    r.raise_for_status()
    return r.json()  # –≤–µ—Ä–Ω—ë—Ç id –∑–∞–¥–∞—á–∏

def runway_poll(task_id: str, timeout_sec=600, every=5):
    # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    started = time.time()
    while True:
        rr = requests.get(f"{RUNWAY_API}/tasks/{task_id}", headers=HEADERS, timeout=60)
        rr.raise_for_status()
        data = rr.json()
        status = data.get("status")
        if status in ("SUCCEEDED", "FAILED", "CANCELED", "ERROR"):
            return data
        if time.time() - started > timeout_sec:
            return {"status": "TIMEOUT", "raw": data}
        time.sleep(every)

def download_file(url: str, save_path: str):
    with requests.get(url, stream=True, timeout=300) as r:
        r.raise_for_status()
        with open(save_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
    return save_path

# ==== –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ====
@bot.message_handler(commands=["start"])
def cmd_start(m: telebot.types.Message):
    uid = m.from_user.id
    user_state[uid] = {"format": None, "scene_key": None, "photo_path": None}
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for k in SCENES.keys():
        kb.add(telebot.types.KeyboardButton(k))
    bot.send_message(
        uid,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç (–¥–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚Äî –æ–¥–Ω–æ —Ñ–æ—Ç–æ):",
        reply_markup=kb
    )
    # —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    kb2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3, one_time_keyboard=True)
    for f in FORMATS:
        kb2.add(telebot.types.KeyboardButton(f))
    bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞:", reply_markup=kb2)
    bot.send_message(uid, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–æ–¥–∏–Ω –∫–∞–¥—Ä, –∞–Ω—Ñ–∞—Å).")

@bot.message_handler(content_types=["text"])
def on_text(m: telebot.types.Message):
    uid = m.from_user.id
    st = user_state.setdefault(uid, {"format": None, "scene_key": None, "photo_path": None})

    if m.text in SCENES:
        st["scene_key"] = m.text
        bot.send_message(uid, f"–°—é–∂–µ—Ç: <b>{m.text}</b>. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.")
        return

    if m.text in FORMATS:
        st["format"] = m.text
        bot.send_message(uid, f"–§–æ—Ä–º–∞—Ç: <b>{m.text}</b>. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.")
        return

    bot.send_message(uid, "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å—é–∂–µ—Ç–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞, –ª–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")

@bot.message_handler(content_types=["photo"])
def on_photo(m: telebot.types.Message):
    uid = m.from_user.id
    st = user_state.setdefault(uid, {"format": None, "scene_key": None, "photo_path": None})
    try:
        # –±–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é
        file_id = m.photo[-1].file_id
        file_info = bot.get_file(file_id)
        content = requests.get(f"https://api.telegram.org/file/bot{TG_TOKEN}/{file_info.file_path}", timeout=120).content
        fname = f"uploads/{uid}_{int(time.time())}.jpg"
        with open(fname, "wb") as f:
            f.write(content)
        st["photo_path"] = fname
        bot.reply_to(m, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ")

        if not st.get("scene_key"):
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—é–∂–µ—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
            return
        if not st.get("format"):
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
            return

        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        bot.send_message(uid, "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
        run_generation_and_send(uid, st)

    except Exception as e:
        print("photo error:", e)
        bot.reply_to(m, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

def run_generation_and_send(uid: int, st: dict):
    scene_key = st["scene_key"]
    scene = SCENES[scene_key]
    choose_format = st["format"]
    photo_path = st["photo_path"]

    prompt_text = build_prompt(scene["kind"], choose_format)
    datauri = encode_image_to_datauri(photo_path)

    try:
        start_resp = runway_start(datauri, prompt_text, scene["duration"])
    except Exception as e:
        bot.send_message(uid, f"Runway —Å—Ç–∞—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return

    task_id = start_resp.get("id") or start_resp.get("task", {}).get("id")
    if not task_id:
        bot.send_message(uid, f"–ù–µ –ø–æ–ª—É—á–∏–ª id –∑–∞–¥–∞—á–∏ –æ—Ç Runway. –û—Ç–≤–µ—Ç: {start_resp}")
        return

    poll = runway_poll(task_id)
    status = poll.get("status")
    if status != "SUCCEEDED":
        bot.send_message(uid, f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        return

    # –í Runway –æ–±—ã—á–Ω–æ –≤–∏–¥–µ–æ-URL –ª–µ–∂–∏—Ç –≤ output[0]
    out = poll.get("output") or []
    if not out:
        bot.send_message(uid, "Runway –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    url = out[0] if isinstance(out[0], str) else out[0].get("url")
    if not url:
        bot.send_message(uid, "–ù–µ –Ω–∞—à—ë–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ Runway.")
        return

    save_as = f"renders/{uid}_{uuid.uuid4().hex}.mp4"
    try:
        download_file(url, save_as)
    except Exception as e:
        bot.send_message(uid, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: {e}")
        return

    # –ü–æ–∫–∞ —à–ª—ë–º –∫–∞–∫ –µ—Å—Ç—å (–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–º –∞–ø–¥–µ–π—Ç–æ–º)
    with open(save_as, "rb") as f:
        bot.send_video(uid, f, caption=f"{scene_key} ¬∑ {choose_format}")

if __name__ == "__main__":
    print("Memory Forever bot started.")
    bot.infinity_polling(skip_pending=True, timeout=60)
